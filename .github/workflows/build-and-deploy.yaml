name: build-and-deploy

on:
  pull_request:
  push:
    branches:
      - main
env:
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  AWS_ECR_DOMAIN: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com
  BUILD_IMAGE: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_DEFAULT_REGION }}.amazonaws.com/cloud-infra
  GIT_SHA: ${{ github.sha }}
  BUILD_TAG: latest

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # - run: make build-image
      # set up docker buildx for caching
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3

        # loog in to aws ecr
      - env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # run: make build-image-push
        run: aws ecr get-login-password --region ${{ vars.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ECR_DOMAIN }}

        # build and push build stage image
      - name: build and push build stage
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.BUILD_IMAGE }}:${{ env.GIT_SHA }}-build
          target: build
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha, mode=max

      # build and push final image
      - name: build and push final image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.BUILD_IMAGE }}:${{ env.GIT_SHA }}
            ${{ env.BUILD_IMAGE }}:latest
          platforms: linux/amd64
          cache-from: |
            type=gha
            ${{ env.BUILD_IMAGE }}:${{ env.GIT_SHA }}-build
          cache-to: type=gha,mode=max
  test:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Log in to AWS ECR
      - name: log in to aws ecr
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # run: make build-image-pull
        run: aws ecr get-login-password --region ${{ vars.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ECR_DOMAIN }}

      # pull the built image
      - name: pull docker image
        run: docker pull ${{ env.BUILD_IMAGE }}:${{ env.GIT_SHA }}
      - run: make up

      - env:
          GOOSE_DBSTRING: postgresql://postgres:password@localhost:5432/postgres?sslmode=disable
          GOOSE_DRIVER: postgres
        run: make build-image-migrate

      - if: always()
        run: make down

  deploy:
    concurrency:
      cancel-in-progress: false
      group: deploy-lock

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DOCKERIZE_URL: ${{ secrets.GOOSE_DBSTRING}}
      GOOSE_DBSTRING: ${{ secrets.GOOSE_DBSTRING}}
      GOOSE_DRIVER: ${{ vars.GOOSE_DRIVER }}
    # if: github.ref == 'refs/heads/main'
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

        # log in to aws ecr
      - name: log in to aws ecr
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        run: aws ecr get-login-password --region ${{ vars.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ECR_DOMAIN }}

      # pull the built image
      - name: pull the built image
        run: docker pull ${{ env.BUILD_IMAGE }}:${{ env.GIT_SHA }}
      # - run: make build-image-pull
      - run: make build-image-migrate
      - run: make build-image-promote

      - run: |
          BUILD_TAG=staging

          if [[ "${GITHUB_REF}" == "refs/heads/prod" ]]; then
            BUILD_TAG=prod
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            BUILD_TAG=staging
          fi

          ECS_CLUSTER_NAME=${BUILD_TAG}
          ECS_SERVICE_NAME=${ECS_CLUSTER_NAME}

          echo "BUILD_TAG: ${BUILD_TAG}"
          echo "ECS_CLUSTER_NAME: ${ECS_CLUSTER_NAME}"
          echo "ECS_SERVICE_NAME: ${ECS_SERVICE_NAME}"

          make BUILD_TAG=$BUILD_TAG build-image-promote
          make ECS_CLUSTER_NAME=$ECS_CLUSTER_NAME ECS_SERVICE_NAME=$ECS_SERVICE_NAME deploy
